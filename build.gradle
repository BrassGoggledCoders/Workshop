buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: "maven"
apply plugin: "java"
apply plugin: "idea"

version = "${minecraft_version}-" + getVersion()
group = "${group}"
archivesBaseName = "${mod_name}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: "snapshot", version: "${mappings_version}"

    runs {
        client {
            workingDirectory project.file("run")
            source sourceSets.main
        }

        server {
            workingDirectory project.file("run")
            source sourceSets.main
        }

        data {
            workingDirectory project.file("run")
            environment 'target', 'fmluserdevdata'
            properties 'fml.earlyprogresswindow': 'false'

            args '--all', '--output', file('src/datagen/resources/'),
                    '--mod', '${mod_name}', '--reports',
                    '--existing', sourceSets.main.resources.srcDirs[0]
        }
    }
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}

repositories {
    mavenLocal()
    maven {
        url 'https://cdn.hrzn.studio/maven/'
    }
    maven {
        url 'https://maven.blamejared.com'
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    if (findProject(':Titanium') != null) {
        compile project(':Titanium')
    } else {
        compile fg.deobf (project.dependencies.create("com.hrznstudio:titanium:${minecraft_version}-${titanium_version}") {
            transitive = false
        })
    }
    compile fg.deobf("mezz.jei:jei-1.15.2:6.0.0.2")
    compile fg.deobf("vazkii.patchouli:Patchouli:${minecraft_version}-${patchouli_version}")
    compile fg.deobf("xyz.brassgoggledcoders:PatchouliProvider:1.15.2-1.0.0-Snapshot.5")
}

jar {
    manifest {
        attributes([
            "Specification-Title"     : "${title}",
            "Specification-Vendor"    : "${team}",
            "Specification-Version"   : "1",
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : "${version}",
            "Implementation-Vendor"   : "${team}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "FMLAT": "accesstransformer.cfg"
        ])
    }
}

String getVersion() {
    String version = "${mod_version}"
    String branch = project.hasProperty("branch") ? project.branch : ""

    if (branch != "") {
        version += "-" + branch

        String buildNumber = getBuildNumber()
        if (buildNumber != "") {
            version += "." + buildNumber
        }
    }

    return version
}

static String getBuildNumber() {
    String buildNumber = System.getenv("BUILD_NUMBER") != null ? System.getenv("BUILD_NUMBER") : ""
    if (buildNumber == "") {
        buildNumber = System.getenv("bamboo_buildNumber") != null ? System.getenv("bamboo_buildNumber") : ""
    }
    return buildNumber
}
